
*******************************************************************************
after parsing
hc_line(TImage;TImage;TShiftState;LongInt;LongInt);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (39,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (ifn, resultdef = $void = "untyped", pos = (19,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         (andn, resultdef = Boolean = "Boolean", pos = (19,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
            (equaln, resultdef = Boolean = "Boolean", pos = (19,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
               (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (19,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  nil
                  symbol = HMOUSEBUTTON
               )
               (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (19,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 0
               )
            )
            (equaln, resultdef = Boolean = "Boolean", pos = (19,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
               (loadn, resultdef = LongInt = "LongInt", pos = (19,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  nil
                  symbol = HMOUSEEVENT
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (19,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  value = 1281101
               )
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (statementn, resultdef = <nil>, pos = (21,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  proc = Draw(<TCanvas>;LongInt;LongInt;TGraphic);
                  methodpointer =
                  (calln, resultdef = TCanvas = "TCanvas", pos = (21,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 255
                     proc = GetCanvas(<TCustomImage>):TCanvas;
                     methodpointer =
                     (loadn, resultdef = TImage = "TImage", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = IMAGE2
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (21,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (21,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )
                  left =
                  (callparan, resultdef = TGraphic = "TGraphic", pos = (21,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 6
                     (subscriptn, resultdef = TGraphic = "TGraphic", pos = (21,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 5
                        (subscriptn, resultdef = TPicture = "TPicture", pos = (21,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 3
                           (loadn, resultdef = TImage = "TImage", pos = (21,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                              nil
                              symbol = IMAGE1
                           )
                        )
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (21,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (21,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 0
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 0
                     )

                  )
                  (callparan, resultdef = <nil>, pos = (21,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     (nothingn, resultdef = $void = "untyped", pos = (21,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     )

                  )
               )

            )
         )
         (ifn, resultdef = $void = "untyped", pos = (25,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
            (andn, resultdef = Boolean = "Boolean", pos = (25,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
               (equaln, resultdef = Boolean = "Boolean", pos = (25,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (25,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = HMOUSEBUTTON
                  )
                  (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (25,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 0
                  )
               )
               (equaln, resultdef = Boolean = "Boolean", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                  (loadn, resultdef = LongInt = "LongInt", pos = (25,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                     nil
                     symbol = HMOUSEEVENT
                  )
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (25,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                     value = 1281102
                  )
               )
            )
            (blockn, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (statementn, resultdef = <nil>, pos = (28,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Draw(<TCanvas>;LongInt;LongInt;TGraphic);
                     methodpointer =
                     (calln, resultdef = TCanvas = "TCanvas", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 255
                        proc = GetCanvas(<TCustomImage>):TCanvas;
                        methodpointer =
                        (loadn, resultdef = TImage = "TImage", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = IMAGE1
                        )
                        left =
                        (callparan, resultdef = <nil>, pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (nothingn, resultdef = $void = "untyped", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           )

                        )
                     )
                     left =
                     (callparan, resultdef = TGraphic = "TGraphic", pos = (28,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 6
                        (subscriptn, resultdef = TGraphic = "TGraphic", pos = (28,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 5
                           (subscriptn, resultdef = TPicture = "TPicture", pos = (28,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 3
                              (loadn, resultdef = TImage = "TImage", pos = (28,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                                 nil
                                 symbol = IMAGE2
                              )
                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (28,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (28,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (28,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (28,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (28,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (28,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (32,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                     proc = Line(<TFPCustomCanvas>;LongInt;LongInt;LongInt;LongInt);
                     methodpointer =
                     (calln, resultdef = TCanvas = "TCanvas", pos = (32,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue], cmplx = 255
                        proc = GetCanvas(<TCustomImage>):TCanvas;
                        methodpointer =
                        (loadn, resultdef = TImage = "TImage", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = IMAGE1
                        )
                        left =
                        (callparan, resultdef = <nil>, pos = (32,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           (nothingn, resultdef = $void = "untyped", pos = (32,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                           )

                        )
                     )
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = PY
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = PX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = OLDY
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                           nil
                           symbol = OLDX
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (32,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        (nothingn, resultdef = $void = "untyped", pos = (32,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        )

                     )
                  )

               )
            )
            (ifn, resultdef = $void = "untyped", pos = (36,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
               (andn, resultdef = Boolean = "Boolean", pos = (36,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 5
                  (equaln, resultdef = Boolean = "Boolean", pos = (36,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (36,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = HMOUSEBUTTON
                     )
                     (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (36,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 0
                     )
                  )
                  (equaln, resultdef = Boolean = "Boolean", pos = (36,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (36,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                        nil
                        symbol = HMOUSEEVENT
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (36,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                        value = 1281103
                     )
                  )
               )
               (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
                  nil
               )
               nil
               nil
            )
            nil
         )
         nil
      )

   )
)

*******************************************************************************
after the firstpass
hc_line(TImage;TImage;TShiftState;LongInt;LongInt);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (39,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (ifn, resultdef = $void = "untyped", pos = (19,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         (andn, resultdef = Boolean = "Boolean", pos = (19,31), loc = LOC_INVALID, expectloc = LOC_JUMP, flags = [nf_pass1_done], cmplx = 5
            (equaln, resultdef = Boolean = "Boolean", pos = (19,6), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
               (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (19,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = HMOUSEBUTTON
               )
               (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (19,22), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 0
               )
            )
            (equaln, resultdef = Boolean = "Boolean", pos = (19,35), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
               (loadn, resultdef = LongInt = "LongInt", pos = (19,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = HMOUSEEVENT
               )
               (ordconstn, resultdef = LongInt = "LongInt", pos = (19,50), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 1281101
               )
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (statementn, resultdef = <nil>, pos = (21,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
               (calln, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  proc = Draw(<TCanvas>;LongInt;LongInt;TGraphic);
                  methodpointer =
                  (temprefn, resultdef = TCanvas = "TCanvas", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                     temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9027B0 flags = [ti_may_be_in_reg])
                  )
                  callinitblock =
                  (blockn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (tempcreaten, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           size = 8, temptypedef = TCanvas = "TCanvas", tempinfo = $000000008F9027B0
                           [ti_may_be_in_reg]
                           tempinit =
                           nil
                        )

                     )
                     (statementn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (assignn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (temprefn, resultdef = TCanvas = "TCanvas", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                              temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9027B0 flags = [ti_may_be_in_reg])
                           )
                           (calln, resultdef = TCanvas = "TCanvas", pos = (21,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                              proc = GetCanvas(<TCustomImage>):TCanvas;
                              methodpointer =
                              (loadn, resultdef = TImage = "TImage", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = IMAGE2
                              )
                              left =
                              (callparan, resultdef = <nil>, pos = (21,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                 (loadn, resultdef = TImage = "TImage", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = IMAGE2
                                 )

                              )
                           )
                        )

                     )
                  )
                  callcleanupblock =
                  (blockn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                     (statementn, resultdef = <nil>, pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                        (tempdeleten, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           release_to_normal: FALSE, temptypedef = TCanvas = "TCanvas", temptype = tt_persistent, tempinfo = $000000008F9027B0
                        )

                     )
                  )
                  left =
                  (callparan, resultdef = TGraphic = "TGraphic", pos = (21,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 6
                     (subscriptn, resultdef = TGraphic = "TGraphic", pos = (21,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 5
                        (subscriptn, resultdef = TPicture = "TPicture", pos = (21,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                           (loadn, resultdef = TImage = "TImage", pos = (21,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = IMAGE1
                           )
                        )
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (21,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (21,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 0
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 0
                     )

                  )
                  (callparan, resultdef = <nil>, pos = (21,53), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 1
                     (temprefn, resultdef = TCanvas = "TCanvas", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9027B0 flags = [ti_may_be_in_reg])
                     )

                  )
               )

            )
         )
         (ifn, resultdef = $void = "untyped", pos = (25,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
            (andn, resultdef = Boolean = "Boolean", pos = (25,36), loc = LOC_INVALID, expectloc = LOC_JUMP, flags = [nf_pass1_done], cmplx = 5
               (equaln, resultdef = Boolean = "Boolean", pos = (25,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                  (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (25,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = HMOUSEBUTTON
                  )
                  (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (25,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 0
                  )
               )
               (equaln, resultdef = Boolean = "Boolean", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                  (loadn, resultdef = LongInt = "LongInt", pos = (25,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = HMOUSEEVENT
                  )
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (25,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                     value = 1281102
                  )
               )
            )
            (blockn, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (statementn, resultdef = <nil>, pos = (28,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Draw(<TCanvas>;LongInt;LongInt;TGraphic);
                     methodpointer =
                     (temprefn, resultdef = TCanvas = "TCanvas", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F902830 flags = [ti_may_be_in_reg])
                     )
                     callinitblock =
                     (blockn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (tempcreaten, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              size = 8, temptypedef = TCanvas = "TCanvas", tempinfo = $000000008F902830
                              [ti_may_be_in_reg]
                              tempinit =
                              nil
                           )

                        )
                        (statementn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (temprefn, resultdef = TCanvas = "TCanvas", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F902830 flags = [ti_may_be_in_reg])
                              )
                              (calln, resultdef = TCanvas = "TCanvas", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                                 proc = GetCanvas(<TCustomImage>):TCanvas;
                                 methodpointer =
                                 (loadn, resultdef = TImage = "TImage", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = IMAGE1
                                 )
                                 left =
                                 (callparan, resultdef = <nil>, pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TImage = "TImage", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = IMAGE1
                                    )

                                 )
                              )
                           )

                        )
                     )
                     callcleanupblock =
                     (blockn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        (statementn, resultdef = <nil>, pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                           (tempdeleten, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              release_to_normal: FALSE, temptypedef = TCanvas = "TCanvas", temptype = tt_persistent, tempinfo = $000000008F902830
                           )

                        )
                     )
                     left =
                     (callparan, resultdef = TGraphic = "TGraphic", pos = (28,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 6
                        (subscriptn, resultdef = TGraphic = "TGraphic", pos = (28,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 5
                           (subscriptn, resultdef = TPicture = "TPicture", pos = (28,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                              (loadn, resultdef = TImage = "TImage", pos = (28,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = IMAGE2
                              )
                           )
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (28,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (28,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (28,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (28,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (28,53), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 1
                        (temprefn, resultdef = TCanvas = "TCanvas", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F902830 flags = [ti_may_be_in_reg])
                        )

                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (32,43), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                  (calln, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     proc = Line(<TFPCustomCanvas>;LongInt;LongInt;LongInt;LongInt);
                     methodpointer =
                     (temprefn, resultdef = TCanvas = "TCanvas", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                        temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9028B0 flags = [ti_may_be_in_reg])
                     )
                     callinitblock =
                     (blockn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        (statementn, resultdef = <nil>, pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                           (tempcreaten, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              size = 8, temptypedef = TCanvas = "TCanvas", tempinfo = $000000008F9028B0
                              [ti_may_be_in_reg]
                              tempinit =
                              nil
                           )

                        )
                        (statementn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (assignn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (temprefn, resultdef = TCanvas = "TCanvas", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                 temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9028B0 flags = [ti_may_be_in_reg])
                              )
                              (calln, resultdef = TCanvas = "TCanvas", pos = (32,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                                 proc = GetCanvas(<TCustomImage>):TCanvas;
                                 methodpointer =
                                 (loadn, resultdef = TImage = "TImage", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = IMAGE1
                                 )
                                 left =
                                 (callparan, resultdef = <nil>, pos = (32,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                    (loadn, resultdef = TImage = "TImage", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = IMAGE1
                                    )

                                 )
                              )
                           )

                        )
                     )
                     callcleanupblock =
                     (blockn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        (statementn, resultdef = <nil>, pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                           (tempdeleten, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              release_to_normal: FALSE, temptypedef = TCanvas = "TCanvas", temptype = tt_persistent, tempinfo = $000000008F9028B0
                           )

                        )
                     )
                     left =
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = PY
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = PX
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OLDY
                        )

                     )
                     (callparan, resultdef = LongInt = "LongInt", pos = (32,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (32,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = OLDX
                        )

                     )
                     (callparan, resultdef = <nil>, pos = (32,43), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 1
                        (temprefn, resultdef = TCanvas = "TCanvas", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9028B0 flags = [ti_may_be_in_reg])
                        )

                     )
                  )

               )
            )
            (ifn, resultdef = $void = "untyped", pos = (36,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (andn, resultdef = Boolean = "Boolean", pos = (36,36), loc = LOC_INVALID, expectloc = LOC_JUMP, flags = [nf_pass1_done], cmplx = 5
                  (equaln, resultdef = Boolean = "Boolean", pos = (36,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (36,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = HMOUSEBUTTON
                     )
                     (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (36,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 0
                     )
                  )
                  (equaln, resultdef = Boolean = "Boolean", pos = (36,40), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (36,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = HMOUSEEVENT
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (36,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1281103
                     )
                  )
               )
               (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                  nil
               )
               nil
               nil
            )
            nil
         )
         nil
      )

   )
)

*******************************************************************************
right before code generation
hc_line(TImage;TImage;TShiftState;LongInt;LongInt);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (17,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
         (statementn, resultdef = <nil>, pos = (39,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (ifn, resultdef = $void = "untyped", pos = (19,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               (andn, resultdef = Boolean = "Boolean", pos = (19,31), loc = LOC_INVALID, expectloc = LOC_JUMP, flags = [nf_pass1_done], cmplx = 5
                  (equaln, resultdef = Boolean = "Boolean", pos = (19,6), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (19,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = HMOUSEBUTTON
                     )
                     (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (19,22), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 0
                     )
                  )
                  (equaln, resultdef = Boolean = "Boolean", pos = (19,35), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                     (loadn, resultdef = LongInt = "LongInt", pos = (19,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                        nil
                        symbol = HMOUSEEVENT
                     )
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (19,50), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                        value = 1281101
                     )
                  )
               )
               (blockn, resultdef = $void = "untyped", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (statementn, resultdef = <nil>, pos = (21,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                     (calln, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                        proc = Draw(<TCanvas>;LongInt;LongInt;TGraphic);
                        methodpointer =
                        (temprefn, resultdef = TCanvas = "TCanvas", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                           temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9027B0 flags = [ti_may_be_in_reg])
                        )
                        callinitblock =
                        (blockn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           (statementn, resultdef = <nil>, pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                              (tempcreaten, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 size = 8, temptypedef = TCanvas = "TCanvas", tempinfo = $000000008F9027B0
                                 [ti_may_be_in_reg]
                                 tempinit =
                                 nil
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (assignn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (temprefn, resultdef = TCanvas = "TCanvas", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                    temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9027B0 flags = [ti_may_be_in_reg])
                                 )
                                 (calln, resultdef = TCanvas = "TCanvas", pos = (21,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                                    proc = GetCanvas(<TCustomImage>):TCanvas;
                                    methodpointer =
                                    (loadn, resultdef = TImage = "TImage", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = IMAGE2
                                    )
                                    left =
                                    (callparan, resultdef = <nil>, pos = (21,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                       (loadn, resultdef = TImage = "TImage", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = IMAGE2
                                       )

                                    )
                                 )
                              )

                           )
                        )
                        callcleanupblock =
                        (blockn, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                           (statementn, resultdef = <nil>, pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                              (tempdeleten, resultdef = $void = "untyped", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                 release_to_normal: FALSE, temptypedef = TCanvas = "TCanvas", temptype = tt_persistent, tempinfo = $000000008F9027B0
                              )

                           )
                        )
                        left =
                        (callparan, resultdef = TGraphic = "TGraphic", pos = (21,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 6
                           (subscriptn, resultdef = TGraphic = "TGraphic", pos = (21,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 5
                              (subscriptn, resultdef = TPicture = "TPicture", pos = (21,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                                 (loadn, resultdef = TImage = "TImage", pos = (21,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                    nil
                                    symbol = IMAGE1
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (21,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (21,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )

                        )
                        (callparan, resultdef = <nil>, pos = (21,53), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 1
                           (temprefn, resultdef = TCanvas = "TCanvas", pos = (21,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9027B0 flags = [ti_may_be_in_reg])
                           )

                        )
                     )

                  )
               )
               (ifn, resultdef = $void = "untyped", pos = (25,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                  (andn, resultdef = Boolean = "Boolean", pos = (25,36), loc = LOC_INVALID, expectloc = LOC_JUMP, flags = [nf_pass1_done], cmplx = 5
                     (equaln, resultdef = Boolean = "Boolean", pos = (25,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (25,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = HMOUSEBUTTON
                        )
                        (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (25,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 0
                        )
                     )
                     (equaln, resultdef = Boolean = "Boolean", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                        (loadn, resultdef = LongInt = "LongInt", pos = (25,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                           nil
                           symbol = HMOUSEEVENT
                        )
                        (ordconstn, resultdef = LongInt = "LongInt", pos = (25,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                           value = 1281102
                        )
                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (statementn, resultdef = <nil>, pos = (28,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = Draw(<TCanvas>;LongInt;LongInt;TGraphic);
                           methodpointer =
                           (temprefn, resultdef = TCanvas = "TCanvas", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F902830 flags = [ti_may_be_in_reg])
                           )
                           callinitblock =
                           (blockn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (tempcreaten, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    size = 8, temptypedef = TCanvas = "TCanvas", tempinfo = $000000008F902830
                                    [ti_may_be_in_reg]
                                    tempinit =
                                    nil
                                 )

                              )
                              (statementn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (assignn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (temprefn, resultdef = TCanvas = "TCanvas", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F902830 flags = [ti_may_be_in_reg])
                                    )
                                    (calln, resultdef = TCanvas = "TCanvas", pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                                       proc = GetCanvas(<TCustomImage>):TCanvas;
                                       methodpointer =
                                       (loadn, resultdef = TImage = "TImage", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = IMAGE1
                                       )
                                       left =
                                       (callparan, resultdef = <nil>, pos = (28,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                          (loadn, resultdef = TImage = "TImage", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = IMAGE1
                                          )

                                       )
                                    )
                                 )

                              )
                           )
                           callcleanupblock =
                           (blockn, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              (statementn, resultdef = <nil>, pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                 (tempdeleten, resultdef = $void = "untyped", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    release_to_normal: FALSE, temptypedef = TCanvas = "TCanvas", temptype = tt_persistent, tempinfo = $000000008F902830
                                 )

                              )
                           )
                           left =
                           (callparan, resultdef = TGraphic = "TGraphic", pos = (28,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 6
                              (subscriptn, resultdef = TGraphic = "TGraphic", pos = (28,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 5
                                 (subscriptn, resultdef = TPicture = "TPicture", pos = (28,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 3
                                    (loadn, resultdef = TImage = "TImage", pos = (28,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                       nil
                                       symbol = IMAGE2
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (28,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (28,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (28,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [], cmplx = 1
                              (ordconstn, resultdef = LongInt = "LongInt", pos = (28,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                                 value = 0
                              )

                           )
                           (callparan, resultdef = <nil>, pos = (28,53), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 1
                              (temprefn, resultdef = TCanvas = "TCanvas", pos = (28,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F902830 flags = [ti_may_be_in_reg])
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (32,43), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                        (calln, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                           proc = Line(<TFPCustomCanvas>;LongInt;LongInt;LongInt;LongInt);
                           methodpointer =
                           (temprefn, resultdef = TCanvas = "TCanvas", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                              temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9028B0 flags = [ti_may_be_in_reg])
                           )
                           callinitblock =
                           (blockn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                              (statementn, resultdef = <nil>, pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
                                 (tempcreaten, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    size = 8, temptypedef = TCanvas = "TCanvas", tempinfo = $000000008F9028B0
                                    [ti_may_be_in_reg]
                                    tempinit =
                                    nil
                                 )

                              )
                              (statementn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                 (assignn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                                    (temprefn, resultdef = TCanvas = "TCanvas", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write], cmplx = 1
                                       temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9028B0 flags = [ti_may_be_in_reg])
                                    )
                                    (calln, resultdef = TCanvas = "TCanvas", pos = (32,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue], cmplx = 255
                                       proc = GetCanvas(<TCustomImage>):TCanvas;
                                       methodpointer =
                                       (loadn, resultdef = TImage = "TImage", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                          nil
                                          symbol = IMAGE1
                                       )
                                       left =
                                       (callparan, resultdef = <nil>, pos = (32,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                                          (loadn, resultdef = TImage = "TImage", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                             nil
                                             symbol = IMAGE1
                                          )

                                       )
                                    )
                                 )

                              )
                           )
                           callcleanupblock =
                           (blockn, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                              (statementn, resultdef = <nil>, pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 0
                                 (tempdeleten, resultdef = $void = "untyped", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                                    release_to_normal: FALSE, temptypedef = TCanvas = "TCanvas", temptype = tt_persistent, tempinfo = $000000008F9028B0
                                 )

                              )
                           )
                           left =
                           (callparan, resultdef = LongInt = "LongInt", pos = (32,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                              (loadn, resultdef = LongInt = "LongInt", pos = (32,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = PY
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                              (loadn, resultdef = LongInt = "LongInt", pos = (32,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = PX
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                              (loadn, resultdef = LongInt = "LongInt", pos = (32,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = OLDY
                              )

                           )
                           (callparan, resultdef = LongInt = "LongInt", pos = (32,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                              (loadn, resultdef = LongInt = "LongInt", pos = (32,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                                 nil
                                 symbol = OLDX
                              )

                           )
                           (callparan, resultdef = <nil>, pos = (32,43), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [], cmplx = 1
                              (temprefn, resultdef = TCanvas = "TCanvas", pos = (32,5), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done], cmplx = 1
                                 temptypedef = TCanvas = "TCanvas", (tempinfo = $000000008F9028B0 flags = [ti_may_be_in_reg])
                              )

                           )
                        )

                     )
                  )
                  (ifn, resultdef = $void = "untyped", pos = (36,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
                     (andn, resultdef = Boolean = "Boolean", pos = (36,36), loc = LOC_INVALID, expectloc = LOC_JUMP, flags = [nf_pass1_done], cmplx = 5
                        (equaln, resultdef = Boolean = "Boolean", pos = (36,11), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                           (loadn, resultdef = hcMouseButton = "<enumeration type>", pos = (36,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = HMOUSEBUTTON
                           )
                           (ordconstn, resultdef = hcMouseButton = "<enumeration type>", pos = (36,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 0
                           )
                        )
                        (equaln, resultdef = Boolean = "Boolean", pos = (36,40), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done], cmplx = 2
                           (loadn, resultdef = LongInt = "LongInt", pos = (36,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                              nil
                              symbol = HMOUSEEVENT
                           )
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (36,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                              value = 1281103
                           )
                        )
                     )
                     (blockn, resultdef = $void = "untyped", pos = (37,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
                        nil
                     )
                     nil
                     nil
                  )
                  nil
               )
               nil
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (41,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
)

*******************************************************************************
after parsing
$LINE_$$_init$; Register;
*******************************************************************************
nil

*******************************************************************************
after parsing
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
   (statementn, resultdef = <nil>, pos = (20,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
         (loadn, resultdef = Boolean = "Boolean", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write], cmplx = 1
            nil
            symbol = REQUIREDERIVEDFORMRESOURCE
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (20,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (21,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (21,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 4
         (subscriptn, resultdef = Boolean = "Boolean", pos = (21,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_isproperty], cmplx = 3
            (loadn, resultdef = TApplication = "TApplication", pos = (21,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
               nil
               symbol = APPLICATION
            )
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (22,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Initialize(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (22,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (22,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (23,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (23,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = TFormMain = "TFormMain", pos = (23,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORMMAIN
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormMain", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typen, resultdef = TFormMain = "TFormMain", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (23,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (23,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (24,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (24,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = TFormNewImage = "TFormNewImage", pos = (24,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORMNEWIMAGE
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormNewImage", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typen, resultdef = TFormNewImage = "TFormNewImage", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (24,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (24,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (25,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (25,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 2
            (loadn, resultdef = TFormEffect = "TFormEffect", pos = (25,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORMEFFECT
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormEffect", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
                  (typen, resultdef = TFormEffect = "TFormEffect", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
         (callparan, resultdef = <nil>, pos = (25,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (25,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (26,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
         proc = Run(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (26,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 1
            (nothingn, resultdef = $void = "untyped", pos = (26,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
   (statementn, resultdef = <nil>, pos = (20,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
         (loadn, resultdef = Boolean = "Boolean", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
            nil
            symbol = REQUIREDERIVEDFORMRESOURCE
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (20,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (21,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (assignn, resultdef = $void = "untyped", pos = (21,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
         (subscriptn, resultdef = Boolean = "Boolean", pos = (21,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_isproperty], cmplx = 3
            (loadn, resultdef = TApplication = "TApplication", pos = (21,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
            value = 1
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (22,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Initialize(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (22,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (23,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (23,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TFormMain = "TFormMain", pos = (23,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORMMAIN
            )

         )
         (callparan, resultdef = <nil>, pos = (23,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormMain", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  (typen, resultdef = TFormMain = "TFormMain", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (24,54), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (24,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TFormNewImage = "TFormNewImage", pos = (24,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORMNEWIMAGE
            )

         )
         (callparan, resultdef = <nil>, pos = (24,54), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormNewImage", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  (typen, resultdef = TFormNewImage = "TFormNewImage", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (25,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (25,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TFormEffect = "TFormEffect", pos = (25,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
               nil
               symbol = FORMEFFECT
            )

         )
         (callparan, resultdef = <nil>, pos = (25,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
         (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
            (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
               (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormEffect", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                  (typen, resultdef = TFormEffect = "TFormEffect", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                  )
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (26,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (calln, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
         proc = Run(<TApplication>);
         methodpointer =
         (loadn, resultdef = TApplication = "TApplication", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
            nil
            symbol = APPLICATION
         )
         left =
         (callparan, resultdef = <nil>, pos = (26,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
            (loadn, resultdef = TApplication = "TApplication", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
               nil
               symbol = APPLICATION
            )

         )
      )

   )
)

*******************************************************************************
right before code generation
$main; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (nothingn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
      )

   )
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (19,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry], cmplx = 255
         (statementn, resultdef = <nil>, pos = (20,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 2
               (loadn, resultdef = Boolean = "Boolean", pos = (20,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write], cmplx = 1
                  nil
                  symbol = REQUIREDERIVEDFORMRESOURCE
               )
               (ordconstn, resultdef = Boolean = "Boolean", pos = (20,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 1
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (21,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (assignn, resultdef = $void = "untyped", pos = (21,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 4
               (subscriptn, resultdef = Boolean = "Boolean", pos = (21,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_isproperty], cmplx = 3
                  (loadn, resultdef = TApplication = "TApplication", pos = (21,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = APPLICATION
                  )
               )
               (ordconstn, resultdef = Boolean = "Boolean", pos = (21,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done], cmplx = 0
                  value = 1
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (22,25), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = Initialize(<TApplication>);
               methodpointer =
               (loadn, resultdef = TApplication = "TApplication", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = APPLICATION
               )
               left =
               (callparan, resultdef = <nil>, pos = (22,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TApplication = "TApplication", pos = (22,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = APPLICATION
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (23,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
               methodpointer =
               (loadn, resultdef = TApplication = "TApplication", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = APPLICATION
               )
               left =
               (callparan, resultdef = $formal = "<Formal type>", pos = (23,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TFormMain = "TFormMain", pos = (23,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                     nil
                     symbol = FORMMAIN
                  )

               )
               (callparan, resultdef = <nil>, pos = (23,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TApplication = "TApplication", pos = (23,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = APPLICATION
                  )

               )
               (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                  (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormMain", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        (typen, resultdef = TFormMain = "TFormMain", pos = (23,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (24,54), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
               methodpointer =
               (loadn, resultdef = TApplication = "TApplication", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = APPLICATION
               )
               left =
               (callparan, resultdef = $formal = "<Formal type>", pos = (24,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TFormNewImage = "TFormNewImage", pos = (24,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                     nil
                     symbol = FORMNEWIMAGE
                  )

               )
               (callparan, resultdef = <nil>, pos = (24,54), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TApplication = "TApplication", pos = (24,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = APPLICATION
                  )

               )
               (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                  (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormNewImage", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        (typen, resultdef = TFormNewImage = "TFormNewImage", pos = (24,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (25,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = CreateForm(<TApplication>;TComponentClass;out <Formal type>);
               methodpointer =
               (loadn, resultdef = TApplication = "TApplication", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = APPLICATION
               )
               left =
               (callparan, resultdef = $formal = "<Formal type>", pos = (25,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TFormEffect = "TFormEffect", pos = (25,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken], cmplx = 1
                     nil
                     symbol = FORMEFFECT
                  )

               )
               (callparan, resultdef = <nil>, pos = (25,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TApplication = "TApplication", pos = (25,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = APPLICATION
                  )

               )
               (callparan, resultdef = TComponentClass = "Class Of TComponent", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_REG, flags = [], cmplx = 1
                  (typeconvn, resultdef = TComponentClass = "Class Of TComponent", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1, convtype = tc_equal, convnodeflags = []
                     (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TFormEffect", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], cmplx = 1
                        (typen, resultdef = TFormEffect = "TFormEffect", pos = (25,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], cmplx = 255
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (26,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
            (calln, resultdef = $void = "untyped", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 255
               proc = Run(<TApplication>);
               methodpointer =
               (loadn, resultdef = TApplication = "TApplication", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                  nil
                  symbol = APPLICATION
               )
               left =
               (callparan, resultdef = <nil>, pos = (26,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [], cmplx = 2
                  (loadn, resultdef = TApplication = "TApplication", pos = (26,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], cmplx = 1
                     nil
                     symbol = APPLICATION
                  )

               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
   (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (blockn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done], cmplx = 0
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [], cmplx = 255
      (asmn, resultdef = $void = "untyped", pos = (27,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_get_asm_position], cmplx = 255
      )

   )
)
